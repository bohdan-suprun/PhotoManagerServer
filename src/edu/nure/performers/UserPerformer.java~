package edu.nure.performers;

import edu.nure.db.RequestPreparing;
import edu.nure.db.entity.User;
import edu.nure.db.entity.constraints.ValidationException;
import edu.nure.email.EmailSender;
import edu.nure.performers.exceptions.PerformException;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Objects;
import java.util.Random;

/**
 * Created by bod on 21.09.15.
 */
public class UserPerformer extends AbstractPerformer {
    @Override
    public int perform(HttpServletRequest request, PrintWriter response) throws PerformException, IOException {
        int action = Integer.valueOf(Objects.requireNonNull(request.getParameter("action")));
        switch (action){
            case Action.GET_USER:
                return doGet(request, response);
            case Action.REGISTRY:
                return doInsert(request, response);
            case Action.UPDATE_USER:
                return doUpdate(request, response);
        }
        return 500;
    }

    @Override
    protected int doGet(HttpServletRequest request, PrintWriter response) throws PerformException, IOException {
        try {
            String name =  request.getParameter("name");
            String phone =  request.getParameter("phone");
            String ajax = request.getParameter("ajax");
            if(name != null) {
                name = name.replace('\'','"');
                ResultSet rs;
                if(ajax != null) {
                    rs = getStatement().executeQuery(RequestPreparing.select("user", new String[]{"*"},
                            "WHERE DISTINCT Name LIKE '%" + name + "%' ORDER BY Name LIMIT 15"));
                }else{
                    rs = getStatement().executeQuery(RequestPreparing.select("user", new String[]{"*"},
                            "WHERE Name = '" + name + "'"));
                }
                while (rs.next()){
                    User user = new User(rs);
                    response.print(user.toXML());
                }
                return 200;
            }
            if(phone != null) {
                phone = phone.replace('\'','"');
                ResultSet rs;
                if(ajax != null) {
                    rs = getStatement().executeQuery(RequestPreparing.select("user", new String[]{"*"},
                            "WHERE Phone LIKE '%" + phone + "%' ORDER BY Phone LIMIT 15"));
                }else{
                    rs = getStatement().executeQuery(RequestPreparing.select("user", new String[]{"*"},
                            "WHERE Phone = '" + phone + "'"));
                }
                while (rs.next()){
                    User user = new User(rs);
                    response.print(user.toXML());
                }
                return 200;
            }
        } catch (SQLException e) {
            throw new PerformException("Ошибка при работе с базой данных " + e.getMessage());
        } catch (ValidationException e) {
            throw new PerformException("Неверный формат данных");
        } catch (NullPointerException ex){
            throw new PerformException("Не указан нужный параметер");
        }
        return 500;
    }

    @Override
    protected int doInsert(HttpServletRequest request, PrintWriter response) throws PerformException, IOException {
        try {
            User user = new User(request);
            String req = RequestPreparing.insert("user",
                    new String[]{"Name", "Phone","Email", "Right"},
                    new Object[]{user.getName(), user.getPhone(), user.getEmail(), user.getRight().getType().toLowerCase()}
            );
            int n = getStatement().executeUpdate(req);

            if(n > 0) {
                ResultSet rs = getStatement().executeQuery(RequestPreparing.select("`user` as U", new String[]{"*"},
                        RequestPreparing.join("`user_right` AS R", "INNER", "U.Right=R.Type")+"WHERE Phone = '" + user.getPhone() + "'"));
                rs.next();
                user = new User(rs);
                String aut_code = getCode(user);
                getStatement().executeUpdate(
                        RequestPreparing.insert("aut",new String[]{"Id", "Code"}, new Object[]{user.getId(), aut_code})
                );
                if (user.getEmail() != null) {
                   EmailSender sender = new EmailSender();
                   sender.send("Photo Studio Registration", "Уважаемый " + user.getName() + "!\n" +
                   "Вы воспользовались услугами нашей студии." +
                                   " Рекомендуем пройти по ссылке https://"+request.getServerName()+"/user?aut=" +
                                   aut_code+
                                   " для регистрацию и оценить все наши преимущества.\nХорошего дня!" +
                                   "Благодарим за доверие!!!",
                    user.getEmail());
                }
                return 200;
            }
            return 400;
        } catch (SQLException e) {
            String msg = e.getMessage().toLowerCase();
            if(msg.contains("unique")) throw new PerformException("Пользователь с таким адрессом почты или телефоном" +
                    " уже зарегестрирован");
            else {
                if (msg.contains("foreign key"))
                    throw new PerformException("Права должны иметь значение Фотограф или Покупатель");

                else throw new PerformException("Ошибка обработки запроса: " + e.getMessage());
            }
        } catch (ValidationException e) {
            throw new PerformException("Ошибка формата данных");
        } catch (MessagingException e) {
            return 200;
        }

    }

    @Override
    protected int doUpdate(HttpServletRequest request, PrintWriter response) throws PerformException, IOException {
        try {
            String setpass = request.getParameter("setpass");
            User user;
            try {
                user = User.getUserById(Integer.valueOf(request.getParameter("id")));
            }catch (NumberFormatException ex ){throw new PerformException("Ошибка формата данных");}

            int n = 0;
            if(setpass != null) {
                user.setPassword(request.getParameter("password"));
                n = getStatement().executeUpdate(RequestPreparing.update("user",
                        new String[]{"Password"},
                        new Object[]{user.getPassword()},
                        "Id="+user.getId()
                ));
            }else{
                user = new User(request);
                n = getStatement().executeUpdate(RequestPreparing.update("user",
                        new String[]{"Name", "Phone", "Email", "Right"},
                                new Object[]{user.getName(), user.getPhone(), user.getEmail(), user.getRight().getType().toLowerCase()},
                        "Id="+user.getId()
                ));
            }
            if(n > 0) return 200;
            return 400;
        } catch (SQLException e) {
            String msg = e.getMessage().toLowerCase();
            if(msg.contains("unique")) throw new PerformException("Пользователь с таким адрессом почты или телефоном" +
                    " уже зарегестрирован");
            else {
                if (msg.contains("foreign key"))
                    throw new PerformException("Права должны иметь значения Фотограф или Покупатель");

                else throw new PerformException("Ошибка обработки запроса: " + e.getMessage());
            }
        } catch (ValidationException e) {
            throw new PerformException("Ошибка формата данных");
        }
    }
    private String getCode(User user){
        try {
            String code = new BigInteger(MessageDigest.getInstance("MD5").digest(
                    (new Date().getTime()+""+user.getId()+user.getPhone()+user.getName()+(1000000+new Random().nextLong())).getBytes()
            )).toString(16);
            return code;
        } catch (NoSuchAlgorithmException e) {
            return new BigInteger(new Date().getTime()+""+user.getName()+user.getPhone()+user.getId()+(1000000+
                    new Random().nextLong())).toString(16);
        }

    }
}
